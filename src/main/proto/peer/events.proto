/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "common/common.proto";
import "peer/chaincode_event.proto";
import "peer/transaction.proto";

option java_package = "org.hyperledger.fabric.protos.peer";
option java_outer_classname = "PeerEvents";
option go_package = "github.com/hyperledger/fabric/protos/peer";

package protos;


//----Event objects----

enum EventType {
        REGISTER = 0;
        BLOCK = 1;
	CHAINCODE = 2;
	REJECTION = 3;
        FILTEREDBLOCK = 4;
        REGISTERCHANNEL = 5;
}

//ChaincodeReg is used for registering chaincode Interests
//when EventType is CHAINCODE
message ChaincodeReg {
    string chaincode_id = 1;
    string event_name = 2;
}

message Interest {
    EventType event_type = 1;
    //Ideally we should just have the following oneof for different
    //Reg types and get rid of EventType. But this is an API change
    //Additional Reg types may add messages specific to their type
    //to the oneof.
    oneof RegInfo {
        ChaincodeReg chaincode_reg_info = 2;
    }
    string chainID = 3;
}

//---------- consumer events ---------
//Register is sent by consumers for registering events
//string type - "register"
message Register {
    repeated Interest events = 1;
}

//Rejection is sent by consumers for erroneous transaction rejection events
//string type - "rejection"
message Rejection {
    Transaction tx = 1;
    string error_msg = 2;
}

//---------- producer events ---------
message Unregister {
    repeated Interest events = 1;
}

//FilteredBlock is sent by producers and contains minimal information
//about the block.
message FilteredBlock {
    string channel_id = 1;
    uint64 number = 2; // The position in the blockchain
    repeated FilteredTransaction filtered_tx = 3;
}

//FilteredTransaction is a minimal set of information about a transaction
//within a block.
message FilteredTransaction {
    string txid = 1;
    TxValidationCode tx_validation_code = 2;
    ChaincodeEvent ccEvent = 3;
}

// SignedEvent is used for any communication between consumer and producer
message SignedEvent {
    // Signature over the event bytes
    bytes signature = 1;
    // Marshal of Event object
    bytes eventBytes = 2;
}

//Event is used by
//  - consumers (adapters) to send Register
//  - producer to advertise supported types and events
message Event {
    //TODO need timestamp

    oneof Event {
        //Register consumer sent event
        Register register = 1;

        //producer events
        common.Block block = 2;
        ChaincodeEvent chaincode_event = 3;
        Rejection rejection = 4;

        //Unregister consumer sent events
        Unregister unregister = 5;

        FilteredBlock filtered_block = 7;

        //ChannelService events
        RegisterChannel register_channel = 8;
        DeregisterChannel deregister_channel = 9;
        ChannelServiceResponse channel_service_response = 10;
    }
    // Creator of the event, specified as a certificate chain
    bytes creator = 6;

    // Channel the event pertains to - used by the channel service when sending
    // block and filtered blohck events
    string channel_id = 11;
}

message RegisterChannel {
    repeated string channel_ids = 1;
    repeated Interest events = 2;
}

message DeregisterChannel {
    repeated string channel_ids = 1;
}

// ChannelServiceResponse returns information about registration/deregistration
// actions on the server to the client. The possible actions are currently
// RegisterChannel and DeregisterChannel. Success indicates whether the action
// succeeded for all channels.
message ChannelServiceResponse {
    string action = 1;
    bool success = 2;
    repeated ChannelServiceResult channel_service_results = 3;
}

// ChannelServiceResult holds information about each action that was requested by
// the client. authorized_events holds the events the client has access to based
// on any ACL that is present. An empty error message means that the action was
// successful. Otherwise, it will contain context about the reason for failure.
message ChannelServiceResult {
    string channel_id = 1;
    repeated string authorized_events = 2;
    string error_msg = 3;
}

// Interface exported by the events server
service Events {
    // event chatting using Event
    rpc Chat(stream SignedEvent) returns (stream Event) {}
}
